Download and install Android Open Source Project (AOSP) on Ubuntu:

#add repository needed for sun-java6-jdk
sudo add-apt-repository "deb http://archive.canonical.com/ natty partner"
#update installed packages
sudo apt-get update
sudo apt-get upgrade -u

#install packages needed to build Android
sudo apt-get install git-core gnupg flex bison gperf libsdl1.2-dev libesd0-dev ibwxgtk2.6-dev squashfs-tools build-essential zip curl libncurses5-dev zlib1g-dev sun-java6-jdk pngcrush g++-multilib lib32z1-dev lib32ncurses5-dev lib32readline-gplv2-dev gcc-4.6-multilib g++-4.6-multilib

http://source.android.com/source/downloading.html

#make directories and repo utility
mkdir -p ~/bin 
mkdir -p ~/android
curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo 
chmod 755 ~/bin/repo
#initialize Android git archive
cd ~/android 
/home/jimmy/bin/repo init -u https://android.googlesource.com/platform/manifest
#download source files
/home/jimmy/bin/repo sync 
#build Android
cd ~/android

gpg --import
git tag -v TAG_NAME

source build/envsetup.sh
lunch full-eng		#yes that is lunch
make -j2




Core Android Projects:
Project				Description
-----------------------		-----------------------	
bionic				C runtime: libc, libm, libdl,dynamic linker
bootloader/legacy		Bootloader reference code
build				Build system
dalvik				Dalvik virtual machine
development			High-level development and debugging tools
frameworks/base			Core Android app framework libraries
frameworks/policies/base	Framework conÔ¨Åguration policies
hardware/libhardware		Hardware abstraction library
hardware/ril			Radio interface layer
kernel				Linux kernel
prebuilt			Binaries to support Linux and Mac OS builds
recovery			System recovery environment
system/bluetooth		Bluetooth tools
system/core			Minimal bootable environment
system/extras	 		Low-level debugging/inspection tools
system/wlan/ti			TI 1251 WLAN driver and tools
---------------------------------------------------------------------



The Android Software Development Kit (SDK) is required to perform forensics on an Android device.  To install, make sure you have the above requirements from the AOSP and install the following:

apt-get install ia32-libs

Download the SDK (android-sdk_r15-linux.tgz) for Linux i386 from http://developer.android.com/sdk

Extract SDK by running the following:
tar -xzvf android-sdk-r15-linux.tgz
cd android-sdk-linux/tools
./android

Select and Install 'Android SDK tools, Android SDK Platform-tools and all the needed Android versions of Android

Add the binary directories to your operating system (OS) execution path so you do not 
have to specify the full path to the programs each time.  In Linux, do the following:

# open your .bashrc in an editor
nano -w ~/.bashrc
#add the following line, substituting your login name
export PATH=$PATH:/home/jimmy/Downloads/android-sdk-linux/tools/
export PATH=$PATH:/home/jimmy/Downloads/android-sdk-linux/platform-tools/

Save, exit, and then re-open a new shell.

Create USB proÔ¨Åles for each Android device manufacturer in the system‚Äôs conÔ¨Åguration, 
speciÔ¨Åcally the udev rules.  
As root, edit/create the udev file /etc/udev/rules.d/51-android.rules and insert the
following:

#Acer
SUBSYSTEM=="usb", SYSFS{idVendor}=="502", MODE="0666"
#Dell
SUBSYSTEM=="usb", SYSFS{idVendor}=="413c", MODE="0666"
#Foxconn
SUBSYSTEM=="usb", SYSFS{idVendor}=="489", MODE="0666"
#Garmin-Asus
SUBSYSTEM=="usb", SYSFS{idVendor}=="091E", MODE="0666"
#HTC
SUBSYSTEM=="usb", SYSFS{idVendor}=="0bb4", MODE="0666"
#Huawei
SUBSYSTEM=="usb", SYSFS{idVendor}=="12d1", MODE="0666"
#Kyocera
SUBSYSTEM=="usb", SYSFS{idVendor}=="482", MODE="0666"
#LG
SUBSYSTEM=="usb", SYSFS{idVendor}=="1004", MODE="0666"
#Motorola
SUBSYSTEM=="usb", SYSFS{idVendor}=="22b8", MODE="0666"
#Nvidia
SUBSYSTEM=="usb", SYSFS{idVendor}=="955", MODE="0666"
#Pantech
SUBSYSTEM=="usb", SYSFS{idVendor}=="10A9", MODE="0666"
#Samsung
SUBSYSTEM=="usb", SYSFS{idVendor}=="400000000", MODE="0666"
#Sharp
SUBSYSTEM=="usb", SYSFS{idVendor}=="04dd", MODE="0666"
#Sony Ericsson
SUBSYSTEM=="usb", SYSFS{idVendor}=="0fce", MODE="0666"
#ZTE
SUBSYSTEM=="usb", SYSFS{idVendor}=="19D2", MODE="0666"

sudo chmod a+r /etc/udev/rules.d/51-android.rules


From inside the Android SDK Manager, go to the 'Tools' menu and click 'Manage AVDs' and
click 'New'
Make sure you populate the following Ô¨Åelds:
  Name:  Provide a name for the virtual device, for example, af23 (Android Forensics 2.3).
  Target:  Select the target platform, in this case Android 2.3  
  SD card:  Optionally create an SDcard for the virtual device.

Highlight the newly crated AVD and click 'Start' and then click 'Launch'




Files of particular forensic and security interest include the following:
 cache.img:  disk image of /cache partition
 sdcard.img:  disk image of SDcard (if created during AVD setup)
 userdata-qemu.img:  disk image of /data partition

The cache.img and userdata-qemu.img are YAFFS2 Ô¨Åle systems that are not supported by
current forensic software.  However, standard forensic tools will work quite well on
sdcard.img, which is a FAT32 Ô¨Ålesystem.

~/.android/avd/af23.avd$ file sdcard.img
sdcard.img: x86 boot sector, code offset 0x5a, OEM-ID "MSWIN4.1", Media 
descriptor 0xf8, 
sectors 51200 (volumes > 32 MB), FAT (32 bit), sectors/FAT 397, reserved3  
0x800000, 
serial number 0x1d0e0817, label: "     SDCARD"

Forensic analyst and security engineers can learn a great deal about Android and how it
operates by leveraging the emulator and examining the network, Ô¨Ålesystem, and data artifacts.





