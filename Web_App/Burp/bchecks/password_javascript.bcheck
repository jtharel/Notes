metadata:
    language: v2-beta
    name: "Password in JavaScript Logger"
    author: "Kyle Gilligan"
    description: "This test searches for indicators of 'password' variables within known JS logger methods."
    tags: "passive", "javascript", "logger", "password"

# `Indicators of JS Logger Method` Keywords: `.log(`, `.info(`, `.warn(`, `.error(`, `.debug(`, `.table(`, `.group(`, `.trace(`, `.push(`, `.captureMessage(`.
# `Indicators of Password` Keywords #1: `password`, `pw`, `pass`, `passwrd`, `passwd`, `pswrd`, `pswd`, `psword`, `pword`, `client_secret`.
# `Indicators of Password` Keywords #2: `client-secret`, `clientsecret`, `secret`, `api_key`, `api-key`, `apikey`.

define:
    # Issue Detail:
    id_01 = `- This test checks whether a file contains both an indicator of a logger functionality being used & an indicator of a 'password/secret' on the same code line.`
    id_02 = `\n- For context, 'password/secrets' values should never be displayed in plaintext by a logger functionality due to the potential risk of leakage by numerous factors.`
    id_03 = `\n    >> Secrets in this context refers to "Account Passwords", "API Keys", & APIs' "client_secret" variable.`
    id_04 = `\n- Console loggers should never have valid reason to display users' passwords in any context.`
    issueDetail_FULL = `{id_01}{id_02}{id_03}{id_04}`

    # Issue Remediation:
    ir_01 = `- If a 'password' value appears presented to consoles or runtime terminals via a logger, that variable should be immediately removed from capture.`
    ir_02 = `\n- Consoles which must capture client information should only be restricted to information which does not risk account compromise.`
    ir_03 = `\n    >> For Example: Client IDs, timestamps.`
    issueRemediation_FULL = `{ir_01}{ir_02}{ir_03}`

given response then

    # This check ensures that only notable 200s HTTP responses appear present in the HTTP response & unacceptable MIME types get ignored.
    if not ({latest.response.status_code} matches "([45]\d{2}.*$)") and ({latest.response.headers} matches "(Content-Type:\s+text/(html|javascript))") then

        # This check looks through HTTP responses' bodies for keywords that indicate usage of both JS loggers & password variables on a shared code line.
        if {latest.response.body} matches "(?i)^(?=.*\b(?:log|info|warn|error|debug|table|group|trace|push|captureMessage)\s*\()(?=.*[^\w]*?(?:pass[-_ ]?word|pw|pass|passwrd|passwd|pswrd|pswd|psword|pword|client[-_ ]?secret|secret|api[-_ ]?key)[^\w]*?).*" then
            report issue:
                severity: high
                confidence: firm
                detail: `{issueDetail_FULL}`
                remediation: `{issueRemediation_FULL}`

        end if
    end if
