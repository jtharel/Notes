Request body containing a query to GraphQL:
{"operationName":"projects","variables":{"offset":10},"query":"query projects($offset: Int) {\n  projects(offset: $offset, limit: 10) {\n    id\n    name\n    description\n    __typename\n  }\n}\n"}

Replace the data in between the " " to contain the following:

query IntrospectionQuery {\n    __schema {\n      queryType { name }\n      mutationType { name }\n      subscriptionType { name }\n      types {\n        ...FullType\n      }\n      directives {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        onOperation\n        onFragment\n        onField\n      }\n    }\n  }\n\n  fragment FullType on __Type {\n    kind\n    name\n    description\n    fields(includeDeprecated: true) {\n      name\n      description\n      args {\n        ...InputValue\n      }\n      type {\n        ...TypeRef\n      }\n      isDeprecated\n      deprecationReason\n    }\n    inputFields {\n      ...InputValue\n    }\n    interfaces {\n      ...TypeRef\n    }\n    enumValues(includeDeprecated: true) {\n      name\n      description\n      isDeprecated\n      deprecationReason\n    }\n    possibleTypes {\n      ...TypeRef\n    }\n  }\n\n  fragment InputValue on __InputValue {\n    name\n    description\n    type { ...TypeRef }\n    defaultValue\n  }\n\n  fragment TypeRef on __Type {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n        }\n      }\n    }\n  }\n\n


So, the new request body looks like this:
{"operationName":"projects","variables":{"offset":10},"query":"query IntrospectionQuery {\n    __schema {\n      queryType { name }\n      mutationType { name }\n      subscriptionType { name }\n      types {\n        ...FullType\n      }\n      directives {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        onOperation\n        onFragment\n        onField\n      }\n    }\n  }\n\n  fragment FullType on __Type {\n    kind\n    name\n    description\n    fields(includeDeprecated: true) {\n      name\n      description\n      args {\n        ...InputValue\n      }\n      type {\n        ...TypeRef\n      }\n      isDeprecated\n      deprecationReason\n    }\n    inputFields {\n      ...InputValue\n    }\n    interfaces {\n      ...TypeRef\n    }\n    enumValues(includeDeprecated: true) {\n      name\n      description\n      isDeprecated\n      deprecationReason\n    }\n    possibleTypes {\n      ...TypeRef\n    }\n  }\n\n  fragment InputValue on __InputValue {\n    name\n    description\n    type { ...TypeRef }\n    defaultValue\n  }\n\n  fragment TypeRef on __Type {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n        }\n      }\n    }\n  }\n\n"}

If you receive and error message about "Unknown operation named projects" you probably need to remove the "operationName":"projects","variables":{"offset":10}," from the request body and resubmit.

Now you should see all the fields, etc. in the "database". Go back to the original query and insert in the names returned. So, the new request body/query would look like this:

{"operationName":"jimmy","variables":{"offset":10},"query":"query jimmy($offset: Int) {\n  jimmy(offset: $offset, limit: 10) {\n    id\n    name\n    description\n    __typename\n  }\n}\n"}

If you receive an error like "Cannot query field "name" or "description" on type "jimmy"" you may need to remove portions of the query like this:

{"operationName":"jimmy","variables":{"offset":10},"query":"query jimmy($offset: Int) {\n  jimmy(offset: $offset, limit: 10) {\n    id\n    \n    __typename\n  }\n}\n"}

Further, you may be able to extract more information by adding a "value" field
{"operationName":"jimmy","variables":{"offset":10},"query":"query jimmy($offset: Int) {\n  jimmy(offset: $offset, limit: 10) {\n    id\n    value\n    __typename\n  }\n}\n"}


The above should work for older versions of GraphQL. If not, the query below works for current versions:

query IntrospectionQuery {\n    __schema {\n      queryType { name }\n      mutationType { name }\n      subscriptionType { name }\n      types {\n        ...FullType\n      }\n      directives {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        locations\n      }\n    }\n  }\n\n  fragment FullType on __Type {\n    kind\n    name\n    description\n    fields(includeDeprecated: true) {\n      name\n      description\n      args {\n        ...InputValue\n      }\n      type {\n        ...TypeRef\n      }\n      isDeprecated\n      deprecationReason\n    }\n    inputFields {\n      ...InputValue\n    }\n    interfaces {\n      ...TypeRef\n    }\n    enumValues(includeDeprecated: true) {\n      name\n      description\n      isDeprecated\n      deprecationReason\n    }\n    possibleTypes {\n      ...TypeRef\n    } \n  }   \n      \n  fragment InputValue on __InputValue {\n    name\n    description\n    type { ...TypeRef }\n    defaultValue\n  }     \n        \n  fragment TypeRef on __Type {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n        }\n      }\n    } \n  } \n




{"kind":"OBJECT","name":"PtlabIIKey","description":null,"fields":[{"name":"id","description":null,"args":[],"type":{"kind":"NON_NULL","name":null,"ofType":{"kind":"SCALAR","name":"String","ofType":null}},"isDeprecated":false,"deprecationReason":null},


{"operationName":"projects","variables":{"offset":10},"query":"query projects($offset: Int) {\n  projects(offset: $offset, limit: 10) {\n    id\n    name\n    description\n    __typename\n  }\n}\n"}87
